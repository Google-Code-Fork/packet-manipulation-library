let b:did_ftplugin = 1
set term=ansi
syntax on

map <F2> <Esc>:setlocal spell spelllang=en_us<CR>
map <F3> <Esc>:setlocal nospell<CR>

" Special highlighting for XML
hi xmlTag ctermfg=blue cterm=bold guifg=white
hi xmlTagName ctermfg=blue cterm=bold guifg=white
hi xmlEndTag ctermfg=blue cterm=bold guifg=white

set ruler showmatch smartindent autoindent cindent
set scrolloff=1 backspace=2 shiftwidth=2 textwidth=80
set whichwrap=<,>,[,],h,l
set listchars=tab:\ \ ,trail:·
set mouse=
set fileformat=unix
set cinkeys=0{,0},:,!^F,o,O,e
set nojoinspaces
set nohlsearch
set viminfo='0,\"100,
set ts=2

if version >= 600

" Vim 6 options

  set fo=tcroqnl

  " Use the right color scheme!!!! TODO Figure out the _right_ way to do this...
  " au BufRead * colo cduan
colorscheme elflord
  " Increase the highlighting accuracy
  syn sync fromstart

else

  set fo=tcroql
  source ~/.vim/colors/cduan.vim
  source ~/.vim/plugin/matchit.vim
  syn sync minlines=1000

end

set guifont=-Schumacher-Clean-Medium-R-Normal--16-160-75-75-C-80-ISO646.1991-IRV

map <Del> <BS>
imap <Del> <BS>

" On LaTeX files don't use indenting.
au BufNewFile,BufRead *.tex set noautoindent nosmartindent nocindent

" On HTML files don't use indenting.
au BufNewFile,BufRead *.html set noautoindent nosmartindent nocindent

" On CGI files, determine type by reading in a line.
fun! CGICheck()
    let l = getline(nextnonblank(1))
    if l =~ 'php'
	set syn=php
    elseif l =~ 'perl'
	set syn=perl
    endif
endfun

au BufRead *.cgi	call CGICheck()

augroup cprog
    au!
augroup end

""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" for LaTeX files
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
"au BufEnter *.tex set autowrite \"Save before making PDF"
"au BufEnter *.tex set updatetime=1000 \"Wait 1000 milliseconds (change if you want to)"
au BufEnter *.tex set makeprg=pdflatex\ -halt-on-error\ %\ >/dev/null "make the pdf file, suppress output, don't do anything if there are errors"

"make the file after specified time of not moving and after every save"
au CursorHold *.tex call UpdateFile()
au BufWritePost *.tex call UpdateFile()

" update function
function! UpdateFile()
    silent make
        "silent !evince -w %<.pdf>/dev/null &  \"refresh the file in evince.  -w option keeps focus on vim console"
        redraw!       "remove artifacts during saves"
        endfunction

" run evince at runtime"
        au BufRead *.tex silent !evince - %<.pdf>/dev/null &
